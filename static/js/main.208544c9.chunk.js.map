{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","role","type","message","data-bs-dismiss","aria-label","Navbar","Fragment","concat","mode","href","title","onClick","toggleMode","id","htmlFor","toggle","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-current","placeholder","Textform","_useState","useState","_useState2","_slicedToArray","text","setText","style","color","heading","value","onChange","event","console","log","target","rows","newtext","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","trim","match","length","replace","App","setMode","_useState3","_useState4","setAlert","setTimeout","document","body","backgroundColor","textColor","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.208544c9.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Alert(props) {\n  return (\n    \n      props.alert && <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n        <b>{props.alert.type}</b> : {props.alert.message}\n  <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n</div>\n    \n  )\n}\n","import React from 'react'\nimport propTypes from 'prop-types'\n// import { Link } from 'react-router-dom' \n\nexport default function Navbar(props) {\n  return (\n    <>\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n    <div className=\"container-fluid\">\n      <a className=\"navbar-brand\" href=\"#\">{props.title}\n      </a>\n      <div className=\"form-check form-switch my-2 mx-2\">\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n  <label className={`form-check-label text-${props.mode === 'light'?'dark':'light'}` } htmlFor=\"flexSwitchCheckDefault\" onClick={props.toggle}>Enable Dark/Light mode</label>\n</div>\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n          <li className=\"nav-item\">\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n          </li>\n          <li className=\"nav-item\">\n         {/* <Link className=\"nav-link\" to=\"/about\">About</Link> */}\n          </li>\n        </ul>\n        <form className=\"d-flex\" role=\"search\">\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n          <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\n        </form>\n      </div>\n    </div>\n  </nav>\n  </>\n  )\n}\n\nNavbar.propTypes = {\n  title : propTypes.string.isRequired\n}\n\n\n","import React, {useState} from 'react'\n\nexport default function Textform(props) {\n    const handleUpClick = ()=>{\nconsole.log(\"The Uppercase button was clicked\" + text);\nlet newtext = text.toUpperCase();\nsetText(newtext);\nprops.showAlert(\"Converted to Uppercase!\",\"Success\")\n  }\n\n    const handleLoClick = ()=>{\n      console.log(\"The Lowercase button was clicked\" + text);\n      let newtext = text.toLowerCase();\n      setText(newtext)\n      props.showAlert(\"Converted to Lowercase\",\"Success\")\n          }\n\n          const handleCopy = ()=>{\n            console.log(\"copy button clicked\");\n            navigator.clipboard.writeText(text)\n      props.showAlert(\"Copied to clipboard\",\"Success\")\n                }\n\n          const clear = ()=>{\n            console.log(\"The clear button was clicked\" + text);\n            let newtext = \"\";\n            setText(newtext)\n            props.showAlert(\"Cleard text\",\"Success\")\n                }\n          \n                const ExtraSpaces = ()=>{\n         let newtext = text.split(/[ ]+/);\n         setText(newtext.join(\" \"));\n         props.showAlert(\"Extra spaces removed\",\"Success\")\n                }\n\n    const handleOnChange = (event)=>{\n        console.log(\"OnChange\")\n        setText(event.target.value)\n            }\n\nconst [text, setText] = useState(\"\")\n  return (\n    <>\n    <div style={{color: props.mode === 'light' ? 'black' : 'white'}}>\n    <div>\n<div className=\"first mb-3\">\n    <h1>{props.heading}</h1>\n  <textarea className=\"form-control\" value={text} onChange={handleOnChange}id=\"mybox\" rows=\"8\"></textarea>\n</div>\n\n<button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\n<button className=\"btn btn-info mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\n<button className=\"btn btn-secondary mx-2\" onClick={clear}>Clear text</button>\n<button className=\"btn btn-success my-2\" id='myBox' onClick={handleCopy}>Copy text</button>\n<button className=\"btn btn-warning mx-2 my-2\" id='Box' onClick={ExtraSpaces}> Remove Extra spaces</button>\n\n    </div>\n\n    <div className=\"container my-3\">\n    <h1>Your text summery</h1>\n    <p>{text.trim() === '' ? 0 : text.match(/\\S+/g).length} words and {text.replace(/\\s+/g, '').length} characters </p>\n    <p>{text.trim() === '' ? 0 : text.match(/\\S+/g).length * 0.008} Minutes read</p>\n    <h2>Preview</h2>\n    <p>{text.length> 0 ? text :'Enter something above the textbox to preveiw here'}</p>\n    </div>\n    </div>\n    </>\n  )\n}\n","// import logo from './logo.svg';\nimport { useState } from 'react';\n// import { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport './App.css';\nimport Alert from './Components/Alert';\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport Textform from './Components/Textform';\nimport React from 'react';\n\n\n\nfunction App() {\n  const [mode,setMode] = useState (\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert  ({\n        message : message,\n        type : type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n  \n\n  const toggleMode = ()=> {\n    if(mode === \"light\"){\n      setMode(\"dark\");\n      document.body.style.backgroundColor = 'black';\n      document.body.style.textColor = 'black';\n      showAlert(\"DarkMode has been Enabled\", \" Success\");\n      \n    }else{\n      setMode(\"light\")\n      document.body.style.backgroundColor = 'white';\n      document.body.style.textColor = 'white';\n      showAlert(\"LightMode has been Enabled\", \" Success\");\n     \n    }\n  }\n  return (\n    <>\n    {/* <BrowserRouter> */}\n  <Navbar title=\"Text-Analyzer\" mode={mode} toggleMode={toggleMode}/>\n  <Alert alert={alert}/>\n  <div className='container my-3'>\n    {/* <Routes> */}\n      {/* <Route exact path='/' element={<Textform showAlert={showAlert} heading=\"Enter the Text to analyze\" mode={mode} />} /> */}\n      {/* <Route exact path='/about' element={<About/>} /> */}\n      <Textform showAlert={showAlert} heading=\"Enter the Text to analyze\" mode={mode} />\n  </div>\n      {/* <About/> */}\n  {/* </Routes> */}\n  {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}